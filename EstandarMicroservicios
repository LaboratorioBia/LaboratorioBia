# GuÃ­a de Desarrollo y EstÃ¡ndares de Microservicios en Prebel

## **IntroducciÃ³n**
Esta guÃ­a establece los estÃ¡ndares de desarrollo, estructura de repositorios y buenas prÃ¡cticas dentro de nuestra organizaciÃ³n Prebel para la creaciÃ³n de microservicios. Su objetivo es garantizar un desarrollo eficiente, organizado y escalable en todos nuestros microservicios.

---

## **1. Estructura de Repositorios**
Para mantener una organizaciÃ³n eficiente en GitHub, se establecen las siguientes convenciones:

### **1.1 OrganizaciÃ³n General**
```
ðŸ“¦ Prebel (OrganizaciÃ³n en GitHub)
â”‚â”€â”€ ðŸ“‚ Aplicacion1
â”‚   â”œâ”€â”€ ðŸ—‚ SERVICE_Usuarios
â”‚   â”œâ”€â”€ ðŸ—‚ SERVICE_Proveedores
â”‚   â”œâ”€â”€ ðŸ—‚ SERVICE_Pedidos
â”‚   â”œâ”€â”€ ðŸ—‚ SERVICE_Facturacion
â”‚   â”œâ”€â”€ ðŸ—‚ FRONT_Aplicacion1
â”‚â”€â”€ ðŸ“‚ Aplicacion2
â”‚   â”œâ”€â”€ ðŸ—‚ SERVICE_Proveedores
â”‚   â”œâ”€â”€ ðŸ—‚ SERVICE_OrdenesCompra
â”‚   â”œâ”€â”€ ðŸ—‚ SERVICE_GestionAlmacenes
â”‚   â”œâ”€â”€ ðŸ—‚ FRONT_Aplicacion2
â”‚â”€â”€ ðŸ“‚ Aplicacion3
â”‚   â”œâ”€â”€ ðŸ—‚ SERVICE_Contabilidad
â”‚   â”œâ”€â”€ ðŸ—‚ SERVICE_Costos
â”‚   â”œâ”€â”€ ðŸ—‚ SERVICE_Reportes
â”‚   â”œâ”€â”€ ðŸ—‚ FRONT_Aplicacion3
â”‚â”€â”€ ðŸ“‚ Servicios_Comunes
â”‚   â”œâ”€â”€ ðŸ—‚ SERVICE_Proveedores
â”‚   â”œâ”€â”€ ðŸ—‚ SERVICE_Notificaciones
â”‚   â”œâ”€â”€ ðŸ—‚ AuthService
â”‚   â”œâ”€â”€ ðŸ—‚ BIA-Utils
â”‚â”€â”€ ðŸ“‚ Infraestructura
â”‚   â”œâ”€â”€ ðŸ—‚ Kubernetes_Configs
â”‚   â”œâ”€â”€ ðŸ—‚ CI_CD_Pipelines
â”‚   â”œâ”€â”€ ðŸ—‚ Terraform_Infraestructura
```
ðŸ“Œ **Reglas:**
- Cada microservicio y frontend tiene su propio repositorio.
- Servicios compartidos estÃ¡n en `Servicios_Comunes`.
- `Infraestructura` centraliza configuraciÃ³n y despliegue.

---

## **2. Desarrollo de Microservicios**
### **2.1 Estructura de un Microservicio**
Cada microservicio sigue una estructura estandarizada:
```
ðŸ“‚ SERVICE_Usuarios
â”‚â”€â”€ ðŸ“‚ src/
â”‚   â”œâ”€â”€ ðŸ“‚ models/
â”‚   â”œâ”€â”€ ðŸ“‚ services/
â”‚   â”œâ”€â”€ ðŸ“‚ routes/
â”‚â”€â”€ ðŸ“‚ tests/
â”‚â”€â”€ ðŸ“‚ docs/
â”‚â”€â”€ ðŸ“„ Dockerfile
â”‚â”€â”€ ðŸ“„ README.md
```
ðŸ“Œ **Reglas:**
- `models/`: Definiciones de la base de datos.
- `services/`: LÃ³gica de negocio.
- `routes/`: DefiniciÃ³n de endpoints.
- `tests/`: Pruebas unitarias y de integraciÃ³n.
- `docs/`: DocumentaciÃ³n en OpenAPI.

#### **Ejemplo de estructura con Django Rest Framework**
```
ðŸ“‚ SERVICE_Usuarios
â”‚â”€â”€ ðŸ“‚ service_usuarios/
â”‚   â”œâ”€â”€ ðŸ“‚ apps/
â”‚   â”‚   â”œâ”€â”€ ðŸ“‚ users/
â”‚   â”‚   â”‚   â”œâ”€â”€ models.py
â”‚   â”‚   â”‚   â”œâ”€â”€ serializers.py
â”‚   â”‚   â”‚   â”œâ”€â”€ views.py
â”‚   â”‚   â”‚   â”œâ”€â”€ urls.py
â”‚   â”œâ”€â”€ ðŸ“‚ config/
â”‚   â”‚   â”œâ”€â”€ settings.py
â”‚   â”‚   â”œâ”€â”€ urls.py
â”‚   â”œâ”€â”€ manage.py
â”‚â”€â”€ ðŸ“‚ tests/
â”‚â”€â”€ ðŸ“‚ docs/
â”‚â”€â”€ ðŸ“„ Dockerfile
â”‚â”€â”€ ðŸ“„ README.md
```

---

## **3. ComunicaciÃ³n entre Servicios**
### **3.1 MÃ©todos de ComunicaciÃ³n**
ðŸ“Œ **Opciones disponibles:**
- **API Gateway** (Kong o Nginx) â†’ Redirige peticiones a los servicios adecuados.
- **MensajerÃ­a AsÃ­ncrona** (Kafka o RabbitMQ) â†’ Para eventos entre aplicaciones.
- **Base de Datos Compartida** â†’ Solo en casos justificados.

Cuando un microservicio necesita datos de otro:
1. **Llamadas Directas API** â†’ Un servicio consulta otro mediante API REST.
2. **Eventos AsÃ­ncronos** â†’ Kafka permite la comunicaciÃ³n sin acoplamiento.
3. **Base de Datos Compartida** â†’ Solo en escenarios donde se necesite consistencia estricta.

ðŸ“Œ **MÃ¡s informaciÃ³n**:
- [API Gateway con Kong](https://docs.konghq.com/)
- [MensajerÃ­a con Kafka](https://kafka.apache.org/)

---

## **4. DocumentaciÃ³n con Swagger en DjangoRF**
Para documentar endpoints de microservicios con Django Rest Framework, se recomienda usar `drf-yasg`.

ðŸ“Œ **Ejemplo de configuraciÃ³n**
```python
from rest_framework import routers
from django.urls import path, include
from drf_yasg.views import get_schema_view
from drf_yasg import openapi

schema_view = get_schema_view(
    openapi.Info(
        title="API Usuarios",
        default_version='v1',
        description="DocumentaciÃ³n de API Usuarios",
    ),
)

urlpatterns = [
    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
]
```

---

## **5. Despliegue y Flujo de Desarrollo** *(Habilidades Avanzadas y Futuras)*
En esta secciÃ³n se abordarÃ¡n estrategias futuras como:
- Despliegue con Kubernetes.
- AutomatizaciÃ³n con Terraform.
- CI/CD con GitHub Actions.

---

## **ConclusiÃ³n**
Este documento define la base para el desarrollo de microservicios dentro de Prebel. Para cualquier duda o mejora, por favor, consultar con el equipo de arquitectura.

